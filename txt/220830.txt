* 객체 지향 언어 (객체 지향 패러다임)란? 

* 클래스 (class) 란 ? 
객체를 정의하는 '설계도(면)' 입니다. (상태, 기능)
-현실 세상에 존재하는 대부분의 것들은 클래스로 표현할 수 있습니다.
-객체를 설계하기 위해선 '상태'(상태등을 변수에 담아둠)와 
'기능'(함수, 메소드)이 있어야 함

설계도(클래스)에서 마분지로 만들어 냄 -> '오브젝트; 되었다 (모델링)
마분지에서 실제 현실세계로 만들어 냄 -> '객체'화 되었다.

ex ) 자전거
상태(속성) : 1. 바퀴 2개 2. 손잡이 1개 3. 몸체 1개
기능(행위) : 1. 앞으로 전진 2. 브레이트 3. 핸들 조작
ex ) 붕어빵틀 -> 하나의 틀로 무한개 만들어 낼 수 있음

*객체 (object) 란? (**나중에는 객체와 object의 차이점도 확인)
객체란 클래스(설계도)를 통해 현실 세계에 뿌리 내릴 수 있는 것
아직 현실 세계에 존재하지는 않지만 존재할 가능성이 있는 것

객체화 되었다 = 클래스에서 프로그램 세상에 실제로 올라 갔을 때
	          객체화 되었다고 한다. (instance-인스턴스화)
프로그래밍 세상에서 객체란 메모리에 로드 할 수 있는 것,
객체가 될 수 없다라는 것은 메모리에 로드할 수 없다는 뜻

사자 클래스 ---> 사자 (*사자 객체)
: 사자 클래스를 정의! 사자는 이 세계에 존재할 수 있는 객체입니다.
동물 클래스 ---> ? (*동물은 객체가 될 수 없다.)
: 추상화 되어있는 경우는 객체가 될 수 없다. (포괄적인 개념)

* 객체 지향적 프로그래밍 설계란 ?
class를 잘 설계하는 것 => 객체의 상태와 기능을 잘 뽑아 내야함

클래스와 클래스 간의 상호 작용으로 진행 가능

컴파일 시점 : 문법 검사
런타임 시점 : 실행 버튼을 눌렀을 때



변수 (데이터 타입에 따라서 분류) : 기본 데이터 타입 (리터럴값 100,200,,,,) -소문자
			      참조 타입 (참조변수:주소값을 가지고 있는 녀석) - 대문자
변수 (메모리 위치에 따라서) : 멤버 변수(member variable) , 지역 변수 (local variable)

★멤버 변수 : '클래스' 안에서 사용하는 변수, 힙(heap) 메모리에 올라간 녀셕을 멤버 변수라고 한다. (s1.height)
	    값을 할당하지 않으면 멤버 변수는 기본 값으로 알아서 초기화 해준다.
★지역 변수 : '함수' 안에서 사용하는 변수, 스택 (stack) 메모리에 올라간 녀석을 지역 변수라고 한다. (s1)
	     반환을 할려면 반드시 초기화를 해 주어야 한다.

객체의 상태(속성)는 클래스의 멤버 변수로 선언한다


**함수와 메서드는 다른 개념
* 함수 (function)
하나의 기능을 수행하는 일련의 코드
구현된 함수는 '호출'하여 사용하고 호출된 함수의 기능이 끝나면 제어가 반환됨
함수로 구현된 하나의 기능은 여러 곳에서 동일한 방식으로 호출되어 사용될 수 있음
- 함수 정의 하기 
함수는 이름, 매개 변수, 반환 값, 함수 몸체(body)로 구성됨
-함수의 활용 : 3자리수 정수값을 매번 덧셈해서 결과를 받아야 한다면 (100번) 
귀찮은 일을 줄이기 위해서 함수를 활용한다.

void - 텅빈 리턴타입 (반환된 값이 없다)
int(//리턴타입) add(//함수의 이름) (int num1, num2 //매개변수) {
int result ;
result = num1 + num2;
return result; (//반환값)
} (//함수몸체)

반환값? 메모리는 한계가 있다 . 실행의 제어가 반환




실행을 시키면 
Stack 이라는 메모리 영역 (기본데이터 타입, 참조타입은 주소값이 들어감)
 : 밑에서부터 하나씩 쌓이는 메모리 영역 (LastInputFirstOutput)
heap 이라는 메모리 영역 (참조타입의 값이 들어감)

* 함수 호출과 스택 메모리
스택 : 함수가 호출 될 때 지역 변수들이 사용하는 메모리 공간
★ 중요 : 함수는 호출해서 사용하고 함수 기능이 끝나면 실행에 제어가 반환된다








































