String은 조금 특별한 클래스
주소값 비교 new String ("abc")

this (3가지 용법)
this - 자기 자신을 가리킨다
1. 인스턴스 자신의 메모리를 가리킴
2. 생성자에서 또 다른 생성자를 호출 할 때 사용
3. 자신의 주소 (참조값)을 반환 함

static
태양이다..!
(모두가 공유할 수 있는 영역,
객체가 태어나기 전에 있는 메모리 영역)
객체 (인스턴스) 들이 공유하는 영역
스택 전에 가장 먼저 올리가는 메모리 영역
메인 함수를 읽고, static을 찾아감~
static 변수 : 인스턴스들이 공유하는 변수
메모리 구조 : 데이터 영역에 올라간다 (static)
클래스이름.변수
static 함수 (메서드) : 함수에 static이라는 키워드 사용한다


멤버변수 사용 불가능!
static의 경우 this 사용 불가
-> static은 객체가 생성됨을 보장하지 않는다

공통으로 사용하는 변수가 필요한 경우
- 여러 인스턴스가 공유하는 기준 값이 필요한 경우
- 학생마다 새로운 학번 생성
- 카드회사에서 카드를 새로 발급할때마다 새로운 카드 번호 부여
- 회사에 사원이 입사할 때 마다 새로운 사번이 필요한
- 은행에서 대기표를 뽑을 경우 (2대이상)

활용 : 멤버변수 + static 변수
객체 마다 데이터를 저장할 필요가 있고
객체 마다 데이터를 공유해야 될 필요가 있을 때


선언 방법 : static int waitNum;
인스턴스가 생성될 때 만들어지는 변수가 아닌,
처음 프로그램이 메모리에 로딩될 때 메모리를 할당
클래스 변수, 정적 변수
인스턴스 생성과 상관없이 사용가능하므로 클래스 이름으로 직접 참조
사용방법 : Student.serialNum = 100;


디자인 패턴 - 싱글톤 패턴
:객체를 단 하나만 만들어야 되는 상황을 보장해야 될 때
//1. 생성자를 private로 만든다.
//2. static 변수를 활용해서 내부에서 객체를 생성한다
//3. 외부에서 유일하게 참조변수 (인스턴스변스)에 접근 가능한 public 메서드를 제공한다.



객체 지향 패러다임에 핵심
객체와 객체간에 관계를 형성하고
상호 작용하게 해서 코드를 설계해 나간다



학생이 버스 지하철을 타면 지하철 수익금 +++ 학생 용돈 --- 코드 짜보기

