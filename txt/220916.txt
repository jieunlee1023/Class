정렬 알고리즘 - - - >
버블 정렬 : 스왑하는 것
Arrays.sort(lottoWinNum); // 배열의 전체를 오름 차순으로 정렬

깃 git
: 작업물들을 저장
깃을 사용하는 이유
: 소스코드나 작업물 관리할 때 편리 
/ 분산형 버전 관리 시스템

버전 관리 시스템 (VCS)
: 사용자 프로젝트에 포함된 파일의 변경 내역을 추적 할 수 있는 도구

-기존 (SVN) 중앙 집중식
: 중앙 서버에 소스코드와 history를 직접 저장
단: 각 개발자만의 version history를 관리 할 수 없다
commit한 내용에 실수가 있을 시에 서버에 (다른 개발자에게 ) 바로 영향을 미치게 되고
만약 중앙 서버에 문자가 생기면 협업이 불가능

-분산 (Git) :
 여러 개발 PC와 저장소에 분산해서 저장
모든 작업자가 원본을 가질 수 있다.
개별 history를 관리 할 수 있기 때문에 네트워크를 사용하지 못하는 상황에서도
대부분의 작업 진행이 가능하다.

소프트웨어 형상 관리 (SCM)

깃과 깃허브는 다른 것
깃
깃허브 ( 원격 컴퓨터를 빌려준다)
: 소스코드를 호스팅하고 협업기능을 지원하는 서비스,  소프트웨어 개발 플랫폼

깃 사이트
https://git-scm.com/

Git 저장소 만들기
저장소 (repository) : 파일이나 폴더를 저장해 두는 곳
Git은 원격 저장소와 로컬 저장소 두 종류의 저장소를 제공
원격 저장소 :
로컬 저장소

pull : 가져오기
push : 보내기

Git bash를 사용합니다
git bash를 사용하면 윈도우 에서도 리눅스의 명령어를 쓸 수 있다.

Git 명령어
git init : 
개인 저장소를 만들 때,
필요한 저장소 하나를 만들면 거의 잘 사용하지는 않게되는 명령어
숨겨진 폴더 .git이 생성 / 이것을 저장소라고 하는데
깃은 이 폴더의 모든 변경 내용을 여기에 저장합니다.
즉 .git 폴더를 지우면 더 이상 깃으로 폴더의 변경사항 추적 불가

git clone : 저장소에 저장된 것들을 불러옴

clear : 깃 창 삭제

git status : 상태를 확인
git add : 앞으로 변경 사항들을 모두 추적
(* 는 모든 것을 다 저장하고 싶을때)
git reset : add한 내용을 삭제
git commit -m : 
m(message) 의미 
git commit - m'15일 까지 이력 저장';
git commit 은 완성형일때 올려주는 것이 좋다


git config --global user.email "ji_euni@naver.com"
git config --global user.name "ji_euni"

git log : 이력이 나옴 (스텍 구조)
git log --oneline :  한 줄로 보이게 (더 가독성 좋아짐)

반드시 기억해야 할 3 상태 (논리적인 구분)
-working Directory
-Staging Area (Index)
-Repository(HEAD)

git checkout . : 마지막 작업을 지우고 그 앞의 작업으로 돌아감
git checkout HEAD ^^^^(지우고 싶은 갯수)
git checkout HEAD ~ 2 (지우고 싶은 갯수)

제일 최신으로 돌아갈때
master 일땐 git master
main 일땐 git main

git puss : 저장소에 보내기

git pull : 저장소에서 불러오기
(git clone 해야함)


브랜치란?


git log --graph
git log --all --decorate --oneline --graph


feature ? 기능


항상 순서를 정하고 임하라.













