*** 생성자 (constructor)
: 생성을 시켜주는 주체
-객체를 생성할 때 new 키워드와 함께 사용 ex) new "Student()" ; (""가 생성자)
-객체를 생성할 때 다음과 같은 모양으로 만들어라고 지시하는 것
- 객체를 생성할 때 강제성을 부여하는 것 
   (내가 만든 객체를 쓰고 싶으면, 생성자의 모양대로 만들어라!)

-하나의 클래스 파일안에 생성자 여러 개 만들 수 있다.

★ 객체가 생성될 때에는 반드시! 생성자가 있어야 한다.
but, 개발자가 생성자를 직접 정의하지 않으면
컴파일러가 알아서 자동으로 생성자(기본 생성자)를 만들어 넣고 컴파일 시킨다

1. 기본 생성자 ? 
모양 : public Student() {}
컴파일러가 기본적으로 만들어주는 생성자
{} 안에는 수행문을 작성할 수 있음

() 안에 매개변수 넣을 수 있음
(넣으면 사용자 정의 생성자!)

2. 사용자 정의 생성자 ?
: 생성자 정의하기 (개발자가 직접 정의)
개발자가 직접 정의하는 생성자
★사용자 정의 생성자가 있으면 컴파일러는 
기본 생성자를 만들어주지 않는다.

*생성자 만드는 규칙
- 생성자는 반환값이 없다
★ 클래스의 이름과 동일!!!!!!!!!!
- 대문자로 시작한다
- 대부분의 생성자는 외부에서 접근 가능 ,
필요에 의해 private로 선언되는 경우 가능 (접근 제어자 파트에서 배움!)


* 생성자 오버로딩 (생성자가 여러개 일때~)
- 생성자가 갖고 있는 모양, 데이터 타입까지 같은 것을 찾아감
- 데이터 타입과 갯수로만 접근 O , 변수명으로 접근 X



******** C R U D 개념 구글링해서 정리하기

* 접근 제어 지시자 (access modifier)
private - 같은 클래스 내부에서만 접근 가능하다.
	민감한 데이터 
아무것도 없음 (default) - 같은 패키지(폴더) 내부에서만 접근 가능하다.
(상속 관계라도 패키지가 다르면 접근 불가!)
protected - 같은 패키지나 상속관계에서 클래스에 접근 가능하다.
public - 클래스 외부 어디에서나 접근 가능.


* 정보 은닉 (information hiding)
핵심적인 부분은 감춰 두는 것.
민감한 데이터들의 위험성이 줄어듦!

* get() / set() 메서드
접근제어자를 쓰지 않으면 getter setter 필요없음

객체 지향 패러다임이라는 것이
멤버변수에 바로 접근해서 데이터 수정은 X
동작(기능, 메소드)를 사용해서 데이터를 수정!


상수 풀

캡슐화 
외부에 오픈할 필요가 없는 부분을 감춰두는 것.
정보 은닉을 활용한 캡슐화
꼭 필요한 정보와 기능만 외부에 오픈함


1번. 누르면 위자드 생성
2번. 누르면 워리어 생성

















