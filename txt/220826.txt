코드 정렬 : ctrl + shift + f

* 상수 (constant)
상수는 변하지 않는 수
final 예약어를 사용하여 선언
☆ 상수는 가독성을 위해 대분자로 쓰는 것을 추천!

* 리터럴(literal)
오른쪽의 값 (R value)를 의미한다.
값을 한번 저장하면 변경 할 수 없는 저장공간
우리가 기존에 알고 있던 '상수'의 다른 이름일뿐이다

* 형 변환 (type conversion)
원래 가지고 있던 데이터 타입을 다른 데이터 타입으로 변경하는 것
서로 다른 자료형들을 연산등의 수행을 위해 하나의 자료형을 통일하는 것
바이트 크기가 작은 자료형에서 큰 자료형으로 형 변환은 자동으로 이루어짐
(작은 상자를 큰 상자에 넣는 것은 무리없이 넣을 수 있다)

1) 묵시적 형변환 (==자동형변환)
2) 명시적 형변환 (==강제형변환)
강제 형 변환시 데이터에 손실이 발생 할 수 있다.
소수점을 그냥 버리고 정수값만 저장해!

* 연산자 (operator) 
항을 이용하여 연산하는 기호
항 -> 연산에 사용되는 값

가장 순위가 높은 연산자 (), []
ex) int a = (int)0.1234;

가장 순위가 낮은 연산자 = (대입연산자)

-대입 연산자
변수에 다른 변수나 값을 대입하는 연산자
이항 연산자 중 우선순위가 가장 낮은 연산자
왼쪽 변수 (L Value) = 오른쪽 변수(변수 또는 식, 값) (R Value) 

-부호 연산자 ( + , - )
단항 연산자
변수의 부호를 유지하거나 (+) 바꿈 (-)
실제 변수의 부호를 변경 하려면 대입 연산자를 사용해야함
ex) 
int a = 10;
System.out.println(a); -> 결과 10
System.out.println(-a); -> 결과 -10
System.out.println(a); -> 결과 10 (a가 온전히 변화된 것이 아님)
//실제 변수에 부호를 변경하려면 대입 연산자를 사용해주어야 한다
number = -number;
System.out.println(number); -> 결과 -10

- 산술 연산자 ( + - * / % )

-복합 대입 연산자
다른 연산자와 대입 연산자를 함께 사용하는 것
반복되는 것들을 생략하기 위해서 사용




-증감(++), 감소(--) 연산자
단항 연산자
★ 변수에 접근해서!
★ 변수의 값을 1 더하거나 1뺄때 사용
statement 기준으로 동작을 앞에 있을 때와 뒤에 있을 때 다르게 동작한다
세미콜론이 끝나고 +1이 된다 (문장이 끝난 다음에 진행됌)
세미콜론을 기준으로 동작!!!!!!!!!!!!!~~~!!!

- 관계 연산자 (비교 연산자) (> , < , >= , <= , == , != )
이상 연산자
관찰의 결과가 참, 거짓을 판별할 때 사용한다
연산의 결과가 true(참), flase(거짓)으로 반환됨
조건문, 반복문의 조건식으로 많이 사용됌


-논리 연산자
&&(논리곱) ||(논리합) !(부정)

&&(논리곱, 엠퍼센트) : 모든 것이 true가 있어야 true , 하나라도 false가 있으면 false
하나라도 거짓이 있으면 연산의 결과는 false이다.

||(논리합, 버티컬 바) : 둘 중 하나만 true 라도 true
하나라도 참이 있으면 연사느이 결과는 true이다.

!(부정) : 단항연산자, 참인 경우에는 거짓으로 거짓인 경우에는 참으로 변경, 변수에 접근해서 값을 변경하는 것은 아님!
		
관계 연산자와 혼합하여 많이 사용한다.
연산에 결과 값은 (반환값은) true, false


-조건 연산자 (삼항 연산자)


연산자 문제, 형 변환 문제 10 문제 만들고 해결까지!! 다음주 제출




